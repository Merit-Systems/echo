generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid()) @db.Uuid
  email           String           @unique
  name            String?
  clerkId         String           @unique
  profilePictureUrl String?        // Profile picture URL from Clerk
  stripeCustomerId String?         // Stripe customer ID for subscriptions and payments
  isArchived      Boolean          @default(false)
  archivedAt      DateTime?        @db.Timestamptz
  createdAt       DateTime         @default(now()) @db.Timestamptz
  updatedAt       DateTime         @updatedAt @db.Timestamptz
  
  totalPaid       Decimal  @db.Decimal(65, 14)   // Aggregate for Total payment amount - supports unlimited dollars with pico-cent precision
  totalSpent      Decimal  @db.Decimal(65, 14)  // Aggregate for Total spent across apps - supports unlimited dollars with pico-cent precision
  
  apiKeys         ApiKey[]         // API keys owned by user
  llmTransactions LlmTransaction[] // LLM transactions
  payments        Payment[]        // payments made to the app
  refreshTokens   RefreshToken[]   // refresh tokens 
  appMemberships  AppMembership[]  // Apps you are a member of
  subscriptions   Subscription[]   // User's subscriptions

  @@map("users")
}

model EchoApp {
  id              String           @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  profilePictureUrl String?        // Custom profile picture for the app
  bannerImageUrl    String?        // Custom banner image for the app
  homepageUrl     String?          // Homepage URL for the app
  isActive        Boolean          @default(true)
  isPublic        Boolean          @default(false)
  isArchived      Boolean          @default(false)
  archivedAt      DateTime?        @db.Timestamptz
  createdAt       DateTime         @default(now()) @db.Timestamptz
  updatedAt       DateTime         @updatedAt @db.Timestamptz
  markUp          Decimal          @db.Decimal(65, 14) @default(1.0)    // mark-up for per-token charging set by owner - supports unlimited precision
  githubId        String?           
  githubType      String?
  authorizedCallbackUrls String[]        @default([]) // Array of allowed redirect URIs
  apiKeys              ApiKey[]                // API keys for the app 
  llmTransactions      LlmTransaction[]        // LLM transactions for that App
  refreshTokens        RefreshToken[]          // Refresh tokens
  appMemberships       AppMembership[]         // Customers of app and owners
  products             Product[]               // Products/subscriptions offered by this app
  subscriptionPackages SubscriptionPackage[]   // Subscription packages offered by this app
  subscriptions        Subscription[]          // Subscriptions for this app's products

  @@map("echo_apps")
}

model AppMembership {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @db.Uuid
  echoAppId  String    @db.Uuid
  role       String    // 'owner', 'admin', 'customer'
  status     String    @default("active") // 'active', 'pending', 'revoked'
  isArchived Boolean   @default(false)
  archivedAt DateTime? @db.Timestamptz
  createdAt  DateTime  @default(now()) @db.Timestamptz
  updatedAt  DateTime  @updatedAt @db.Timestamptz
  totalSpent Decimal  @db.Decimal(65, 14)  // Aggregate for Total spent by user for this app - supports unlimited dollars with pico-cent precision
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  echoApp EchoApp @relation(fields: [echoAppId], references: [id], onDelete: Cascade)

  @@unique([userId, echoAppId])
  @@map("app_memberships")
}

model ApiKey {
  id              String    @id @default(uuid()) @db.Uuid
  keyHash         String    @unique /// Deterministic HMAC-SHA256 hash of the API key for secure storage and O(1) lookup
  name            String?
  isActive        Boolean   @default(true)
  isArchived      Boolean   @default(false)
  archivedAt      DateTime? @db.Timestamptz
  lastUsed        DateTime? @db.Timestamptz
  metadata        Json?
  createdAt       DateTime  @default(now()) @db.Timestamptz
  updatedAt       DateTime  @updatedAt @db.Timestamptz
  userId          String    @db.Uuid
  echoAppId       String    @db.Uuid
  
  scope           String    @default("owner") 
  // Permissions available to API key - can be <= to AppMembership.role for same (userId, echoAppId) pair
  
  echoApp       EchoApp          @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  llmTransactions LlmTransaction[] // LLM transactions using this API key

  @@map("api_keys")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  isArchived      Boolean   @default(false)
  archivedAt      DateTime? @db.Timestamptz
  expiresAt DateTime @db.Timestamptz
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  userId    String   @db.Uuid
  echoAppId String   @db.Uuid
  scope     String   @default("llm:invoke offline_access")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  echoApp   EchoApp  @relation(fields: [echoAppId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Payment {
  id              String   @id @default(uuid()) @db.Uuid
  stripePaymentId String   @unique
  amount          Decimal  @db.Decimal(65, 14)  // Supports unlimited dollar amounts with pico-cent precision
  currency        String   @default("usd")
  status          String
  description     String?
  isArchived      Boolean  @default(false)
  archivedAt      DateTime? @db.Timestamptz
  createdAt       DateTime @default(now()) @db.Timestamptz
  updatedAt       DateTime @updatedAt @db.Timestamptz
  userId          String   @db.Uuid
  
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade) // THE USER IS ALWAYS THE PAYER

  @@map("payments")
}

model LlmTransaction {
  id           String   @id @default(uuid()) @db.Uuid
  providerId   String
  model        String
  inputTokens  Int
  outputTokens Int
  totalTokens  Int
  cost         Decimal  @db.Decimal(65, 14)  // Supports unlimited cost values with pico-cent precision
  prompt       String?
  response     String?
  status       String
  errorMessage String?
  isArchived   Boolean  @default(false)
  archivedAt   DateTime? @db.Timestamptz
  createdAt    DateTime @default(now()) @db.Timestamptz
  userId       String   @db.Uuid
  echoAppId    String   @db.Uuid
  apiKeyId     String?   @db.Uuid  // API key used for this transaction (not required, won't be included if it was using a JWT)
  
  echoApp  EchoApp @relation(fields: [echoAppId], references: [id]) // Required relation, every LLM transaction must be bound to an app
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Always the user who spent their balance on the tx
  apiKey   ApiKey?   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade) // API key that was used for this transaction

  @@map("llm_transactions")
}

model Product {
  id              String           @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  stripeProductId String           @unique // Stripe product ID
  stripePriceId   String           @unique // Stripe price ID  
  price           Decimal          @db.Decimal(65, 14) // Price in dollars
  currency        String           @default("usd")
  isActive        Boolean          @default(true)
  isArchived      Boolean          @default(false)
  archivedAt      DateTime?        @db.Timestamptz
  createdAt       DateTime         @default(now()) @db.Timestamptz
  updatedAt       DateTime         @updatedAt @db.Timestamptz
  echoAppId       String           @db.Uuid
  
  echoApp                    EchoApp                      @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  subscriptionProducts       SubscriptionProduct[]
  subscriptionPackageProducts SubscriptionPackageProduct[]
  
  @@map("products")
}

model SubscriptionPackage {
  id          String           @id @default(uuid()) @db.Uuid
  name        String
  description String?
  isActive    Boolean          @default(true)
  isArchived  Boolean          @default(false)
  archivedAt  DateTime?        @db.Timestamptz
  createdAt   DateTime         @default(now()) @db.Timestamptz
  updatedAt   DateTime         @updatedAt @db.Timestamptz
  echoAppId   String           @db.Uuid
  
  echoApp                    EchoApp                      @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  subscriptionPackageProducts SubscriptionPackageProduct[]
  subscriptions              Subscription[]
  
  @@map("subscription_packages")
}

model SubscriptionPackageProduct {
  id                     String              @id @default(uuid()) @db.Uuid
  subscriptionPackageId  String              @db.Uuid
  productId              String              @db.Uuid
  isActive               Boolean             @default(true)
  createdAt              DateTime            @default(now()) @db.Timestamptz
  updatedAt              DateTime            @updatedAt @db.Timestamptz
  
  subscriptionPackage SubscriptionPackage @relation(fields: [subscriptionPackageId], references: [id], onDelete: Cascade)
  product             Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([subscriptionPackageId, productId])
  @@map("subscription_package_products")
}

model Subscription {
  id                    String           @id @default(uuid()) @db.Uuid
  stripeSubscriptionId  String           @unique // Stripe subscription ID
  stripeCustomerId      String           // Stripe customer ID
  status                String           // active, inactive, canceled, etc.
  currentPeriodStart    DateTime?        @db.Timestamptz
  currentPeriodEnd      DateTime?        @db.Timestamptz
  isActive              Boolean          @default(false)
  isArchived            Boolean          @default(false)
  archivedAt            DateTime?        @db.Timestamptz
  createdAt             DateTime         @default(now()) @db.Timestamptz
  updatedAt             DateTime         @updatedAt @db.Timestamptz
  userId                String           @db.Uuid
  echoAppId             String           @db.Uuid
  subscriptionPackageId String?          @db.Uuid // Optional - for package subscriptions
  
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  echoApp              EchoApp                @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  subscriptionPackage  SubscriptionPackage?   @relation(fields: [subscriptionPackageId], references: [id])
  subscriptionProducts SubscriptionProduct[]
  
  @@map("subscriptions")
}

model SubscriptionProduct {
  id             String       @id @default(uuid()) @db.Uuid
  subscriptionId String       @db.Uuid
  productId      String       @db.Uuid
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now()) @db.Timestamptz
  updatedAt      DateTime     @updatedAt @db.Timestamptz
  
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([subscriptionId, productId])
  @@map("subscription_products")
}

