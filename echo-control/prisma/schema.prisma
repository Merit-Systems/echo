generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid()) @db.Uuid
  email             String          @unique
  name              String?
  clerkId           String          @unique
  isArchived        Boolean         @default(false)
  archivedAt        DateTime?       @db.Timestamptz(6)
  createdAt         DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime        @updatedAt @db.Timestamptz(6)
  profilePictureUrl String?
  stripeCustomerId  String?
  apiKeys           ApiKey[]
  appMemberships    AppMembership[]
  creditGrants      CreditGrant[]
  payments          Payment[]
  refreshTokens     RefreshToken[]
  revenues          Revenue[]
  subscriptions     Subscription[]
  transactions      Transaction[]

  @@map("users")
}

model EchoApp {
  id                     String                @id @default(uuid()) @db.Uuid
  name                   String
  description            String?
  isArchived             Boolean               @default(false)
  archivedAt             DateTime?             @db.Timestamptz(6)
  createdAt              DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime              @updatedAt @db.Timestamptz(6)
  authorizedCallbackUrls String[]              @default([])
  githubId               String?
  githubType             String?
  isPublic               Boolean               @default(false)
  bannerImageUrl         String?
  profilePictureUrl      String?
  homepageUrl            String?
  currentMarkupId        String?               @unique @db.Uuid
  apiKeys                ApiKey[]
  appMemberships         AppMembership[]
  currentMarkup          Markup?               @relation("CurrentMarkup", fields: [currentMarkupId], references: [id])
  markups                Markup[]
  products               Product[]
  refreshTokens          RefreshToken[]
  revenues               Revenue[]
  subscriptionPackages   SubscriptionPackage[]
  subscriptions          Subscription[]
  transactions           Transaction[]
  usageProducts          UsageProduct[]

  @@map("echo_apps")
}

model AppMembership {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @db.Uuid
  echoAppId  String    @db.Uuid
  role       String
  status     String    @default("active")
  isArchived Boolean   @default(false)
  archivedAt DateTime? @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @db.Timestamptz(6)
  echoApp    EchoApp   @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, echoAppId])
  @@map("app_memberships")
}

model ApiKey {
  id           String        @id @default(uuid()) @db.Uuid
  /// Deterministic HMAC-SHA256 hash of the API key for secure storage and O(1) lookup
  keyHash      String        @unique
  name         String?
  isArchived   Boolean       @default(false)
  archivedAt   DateTime?     @db.Timestamptz(6)
  lastUsed     DateTime?     @db.Timestamptz(6)
  metadata     Json?
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(6)
  userId       String        @db.Uuid
  echoAppId    String        @db.Uuid
  scope        String        @default("owner")
  echoApp      EchoApp       @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("api_keys")
}

model RefreshToken {
  id         String    @id @default(uuid()) @db.Uuid
  token      String    @unique
  isArchived Boolean   @default(false)
  archivedAt DateTime? @db.Timestamptz(6)
  expiresAt  DateTime  @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @db.Timestamptz(6)
  userId     String    @db.Uuid
  echoAppId  String    @db.Uuid
  scope      String    @default("llm:invoke offline_access")
  echoApp    EchoApp   @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Payment {
  id              String        @id @default(uuid()) @db.Uuid
  stripePaymentId String        @unique
  amount          Decimal       @db.Decimal(65, 14)
  currency        String        @default("usd")
  status          String
  description     String?
  isArchived      Boolean       @default(false)
  archivedAt      DateTime?     @db.Timestamptz(6)
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime      @updatedAt @db.Timestamptz(6)
  userId          String        @db.Uuid
  creditGrants    CreditGrant[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  revenues        Revenue[]

  @@map("payments")
}

model UsageProduct {
  id                  String        @id @default(uuid()) @db.Uuid
  name                String
  description         String?
  providerId          String
  model               String
  inputPricePerToken  Decimal?      @db.Decimal(65, 14)
  outputPricePerToken Decimal?      @db.Decimal(65, 14)
  category            String        @default("llm")
  isArchived          Boolean       @default(false)
  archivedAt          DateTime?     @db.Timestamptz(6)
  createdAt           DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime      @updatedAt @db.Timestamptz(6)
  echoAppId           String        @db.Uuid
  transactions        Transaction[]
  echoApp             EchoApp       @relation(fields: [echoAppId], references: [id], onDelete: Cascade)

  @@map("usage_products")
}

model Transaction {
  id             String        @id @default(uuid()) @db.Uuid
  providerId     String
  model          String
  inputTokens    Int
  outputTokens   Int
  totalTokens    Int
  cost           Decimal       @db.Decimal(65, 14)
  prompt         String?
  response       String?
  status         String
  errorMessage   String?
  isArchived     Boolean       @default(false)
  archivedAt     DateTime?     @db.Timestamptz(6)
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  userId         String        @db.Uuid
  echoAppId      String        @db.Uuid
  apiKeyId       String?       @db.Uuid
  usageProductId String        @db.Uuid
  creditGrants   CreditGrant[]
  revenues       Revenue[]
  apiKey         ApiKey?       @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  echoApp        EchoApp       @relation(fields: [echoAppId], references: [id])
  usageProduct   UsageProduct  @relation(fields: [usageProductId], references: [id])
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model CreditGrant {
  id            String       @id @default(uuid()) @db.Uuid
  type          String
  amount        Decimal      @db.Decimal(65, 14)
  source        String
  description   String?
  expiresAt     DateTime?    @db.Timestamptz(6)
  isArchived    Boolean      @default(false)
  archivedAt    DateTime?    @db.Timestamptz(6)
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime     @updatedAt @db.Timestamptz(6)
  userId        String       @db.Uuid
  paymentId     String?      @db.Uuid
  markupId      String?      @db.Uuid
  transactionId String?      @db.Uuid
  markup        Markup?      @relation(fields: [markupId], references: [id])
  payment       Payment?     @relation(fields: [paymentId], references: [id])
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  revenues      Revenue[]

  @@map("credit_grants")
}

model Product {
  id                          String                       @id @default(uuid()) @db.Uuid
  name                        String
  description                 String?
  stripeProductId             String                       @unique
  stripePriceId               String                       @unique
  price                       Decimal                      @db.Decimal(65, 14)
  currency                    String                       @default("usd")
  isArchived                  Boolean                      @default(false)
  archivedAt                  DateTime?                    @db.Timestamptz(6)
  createdAt                   DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt                   DateTime                     @updatedAt @db.Timestamptz(6)
  echoAppId                   String                       @db.Uuid
  echoApp                     EchoApp                      @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  subscriptionPackageProducts SubscriptionPackageProduct[]
  subscriptionProducts        SubscriptionProduct[]

  @@map("products")
}

model SubscriptionPackage {
  id                          String                       @id @default(uuid()) @db.Uuid
  name                        String
  description                 String?
  isArchived                  Boolean                      @default(false)
  archivedAt                  DateTime?                    @db.Timestamptz(6)
  createdAt                   DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt                   DateTime                     @updatedAt @db.Timestamptz(6)
  echoAppId                   String                       @db.Uuid
  subscriptionPackageProducts SubscriptionPackageProduct[]
  echoApp                     EchoApp                      @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  subscriptions               Subscription[]

  @@map("subscription_packages")
}

model SubscriptionPackageProduct {
  id                    String              @id @default(uuid()) @db.Uuid
  subscriptionPackageId String              @db.Uuid
  productId             String              @db.Uuid
  createdAt             DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime            @updatedAt @db.Timestamptz(6)
  product               Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptionPackage   SubscriptionPackage @relation(fields: [subscriptionPackageId], references: [id], onDelete: Cascade)

  @@unique([subscriptionPackageId, productId])
  @@map("subscription_package_products")
}

model Subscription {
  id                    String                @id @default(uuid()) @db.Uuid
  stripeSubscriptionId  String                @unique
  stripeCustomerId      String
  status                String
  currentPeriodStart    DateTime?             @db.Timestamptz(6)
  currentPeriodEnd      DateTime?             @db.Timestamptz(6)
  isArchived            Boolean               @default(false)
  archivedAt            DateTime?             @db.Timestamptz(6)
  createdAt             DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime              @updatedAt @db.Timestamptz(6)
  userId                String                @db.Uuid
  echoAppId             String                @db.Uuid
  subscriptionPackageId String?               @db.Uuid
  subscriptionProducts  SubscriptionProduct[]
  echoApp               EchoApp               @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  subscriptionPackage   SubscriptionPackage?  @relation(fields: [subscriptionPackageId], references: [id])
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model SubscriptionProduct {
  id             String       @id @default(uuid()) @db.Uuid
  subscriptionId String       @db.Uuid
  productId      String       @db.Uuid
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime     @updatedAt @db.Timestamptz(6)
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, productId])
  @@map("subscription_products")
}

model Markup {
  id            String        @id @default(uuid()) @db.Uuid
  rate          Decimal       @default(1.0) @db.Decimal(65, 14)
  name          String?
  isDefault     Boolean       @default(false)
  isArchived    Boolean       @default(false)
  archivedAt    DateTime?     @db.Timestamptz(6)
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime      @updatedAt @db.Timestamptz(6)
  echoAppId     String        @db.Uuid
  creditGrants  CreditGrant[]
  currentForApp EchoApp?      @relation("CurrentMarkup")
  echoApp       EchoApp       @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  revenues      Revenue[]

  @@map("markups")
}

model Revenue {
  id            String       @id @default(uuid()) @db.Uuid
  rawCost       Decimal      @db.Decimal(65, 14)
  markupRate    Decimal      @db.Decimal(65, 14)
  markupAmount  Decimal      @db.Decimal(65, 14)
  amount        Decimal      @db.Decimal(65, 14)
  type          String
  description   String?
  isArchived    Boolean      @default(false)
  archivedAt    DateTime?    @db.Timestamptz(6)
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime     @updatedAt @db.Timestamptz(6)
  userId        String       @db.Uuid
  echoAppId     String       @db.Uuid
  markupId      String?      @db.Uuid
  paymentId     String?      @db.Uuid
  creditGrantId String?      @db.Uuid
  transactionId String?      @db.Uuid
  creditGrant   CreditGrant? @relation(fields: [creditGrantId], references: [id])
  echoApp       EchoApp      @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  markup        Markup?      @relation(fields: [markupId], references: [id])
  payment       Payment?     @relation(fields: [paymentId], references: [id])
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("revenues")
}
