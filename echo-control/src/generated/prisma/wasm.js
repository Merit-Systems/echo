
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  emailVerified: 'emailVerified',
  image: 'image',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  totalPaid: 'totalPaid',
  totalSpent: 'totalSpent',
  admin: 'admin'
};

exports.Prisma.AccountScalarFieldEnum = {
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.EchoAppScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  profilePictureUrl: 'profilePictureUrl',
  bannerImageUrl: 'bannerImageUrl',
  homepageUrl: 'homepageUrl',
  isPublic: 'isPublic',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorizedCallbackUrls: 'authorizedCallbackUrls',
  currentReferralRewardId: 'currentReferralRewardId'
};

exports.Prisma.AppMembershipScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  echoAppId: 'echoAppId',
  role: 'role',
  status: 'status',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  totalSpent: 'totalSpent',
  amountSpent: 'amountSpent',
  referrerId: 'referrerId'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  keyHash: 'keyHash',
  name: 'name',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  lastUsed: 'lastUsed',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  echoAppId: 'echoAppId',
  scope: 'scope'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  echoAppId: 'echoAppId',
  scope: 'scope',
  sessionId: 'sessionId'
};

exports.Prisma.AppSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  echoAppId: 'echoAppId',
  deviceName: 'deviceName',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastSeenAt: 'lastSeenAt',
  revokedAt: 'revokedAt',
  isArchived: 'isArchived'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  description: 'description',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  spendPoolId: 'spendPoolId'
};

exports.Prisma.MarkUpScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  description: 'description',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  echoAppId: 'echoAppId'
};

exports.Prisma.GithubLinkScalarFieldEnum = {
  id: 'id',
  githubId: 'githubId',
  githubType: 'githubType',
  githubUrl: 'githubUrl',
  description: 'description',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  echoAppId: 'echoAppId'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  transactionMetadataId: 'transactionMetadataId',
  totalCost: 'totalCost',
  appProfit: 'appProfit',
  markUpProfit: 'markUpProfit',
  referralProfit: 'referralProfit',
  rawTransactionCost: 'rawTransactionCost',
  status: 'status',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  createdAt: 'createdAt',
  userId: 'userId',
  echoAppId: 'echoAppId',
  apiKeyId: 'apiKeyId',
  markUpId: 'markUpId',
  githubLinkId: 'githubLinkId',
  spendPoolId: 'spendPoolId',
  userSpendPoolUsageId: 'userSpendPoolUsageId',
  referralCodeId: 'referralCodeId',
  referrerRewardId: 'referrerRewardId'
};

exports.Prisma.SpendPoolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  totalPaid: 'totalPaid',
  perUserSpendLimit: 'perUserSpendLimit',
  totalSpent: 'totalSpent',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  echoAppId: 'echoAppId'
};

exports.Prisma.UserSpendPoolUsageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  spendPoolId: 'spendPoolId',
  totalSpent: 'totalSpent',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionMetadataScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  provider: 'provider',
  model: 'model',
  inputTokens: 'inputTokens',
  outputTokens: 'outputTokens',
  totalTokens: 'totalTokens',
  toolCost: 'toolCost',
  prompt: 'prompt',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  userId: 'userId',
  echoAppId: 'echoAppId',
  grantType: 'grantType',
  grantAmount: 'grantAmount',
  reusable: 'reusable',
  expiresAt: 'expiresAt',
  isUsed: 'isUsed',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  usedAt: 'usedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralRewardScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  description: 'description',
  isArchived: 'isArchived',
  archivedAt: 'archivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  echoAppId: 'echoAppId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.GithubType = exports.$Enums.GithubType = {
  user: 'user',
  repo: 'repo'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  EchoApp: 'EchoApp',
  AppMembership: 'AppMembership',
  ApiKey: 'ApiKey',
  RefreshToken: 'RefreshToken',
  AppSession: 'AppSession',
  Payment: 'Payment',
  MarkUp: 'MarkUp',
  GithubLink: 'GithubLink',
  Transaction: 'Transaction',
  SpendPool: 'SpendPool',
  UserSpendPoolUsage: 'UserSpendPoolUsage',
  TransactionMetadata: 'TransactionMetadata',
  ReferralCode: 'ReferralCode',
  ReferralReward: 'ReferralReward'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
