{"code":"#!/usr/bin/env tsx\nvar __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});import*as fs from\"fs\";import*as path from\"path\";import{execSync}from\"child_process\";import{fileURLToPath}from\"url\";const __filename=fileURLToPath(import.meta.url);const __dirname=path.dirname(__filename);const CONTROL_APP_PATH=\"../../../app/control\";const RESOLVED_TYPES_FILE=\"src/generated/api-types-resolved.ts\";const SDK_OUTPUT_FILE=\"src/api-types.ts\";function parseArgs(){const args=process.argv.slice(2);return{verbose:args.includes(\"--verbose\")||args.includes(\"-v\"),skipGeneration:args.includes(\"--skip-generation\")}}__name(parseArgs,\"parseArgs\");function log(message,options){if(options.verbose){console.log(`[generate-api-types] ${message}`)}}__name(log,\"log\");function generateControlAppTypes(options){if(options.skipGeneration){log(\"Skipping API type generation (--skip-generation flag)\",options);return}log(\"Generating API types in control app...\",options);try{const controlAppPath=path.resolve(__dirname,CONTROL_APP_PATH);if(!fs.existsSync(controlAppPath)){throw new Error(`Control app not found at: ${controlAppPath}`)}execSync(\"pnpm prisma:generate\",{cwd:controlAppPath,stdio:options.verbose?\"inherit\":\"pipe\"});execSync(\"npm run generate-api-types\",{cwd:controlAppPath,stdio:options.verbose?\"inherit\":\"pipe\"});log(\"\\u2705 Successfully generated API types in control app\",options)}catch(error){console.error(\"\\u274C Failed to generate API types in control app:\",error);process.exit(1)}}__name(generateControlAppTypes,\"generateControlAppTypes\");function copyResolvedTypes(options){log(\"Copying resolved API types to SDK...\",options);try{const controlAppPath=path.resolve(__dirname,CONTROL_APP_PATH);const resolvedTypesPath=path.join(controlAppPath,RESOLVED_TYPES_FILE);const sdkOutputPath=path.resolve(__dirname,\"..\",SDK_OUTPUT_FILE);if(!fs.existsSync(resolvedTypesPath)){throw new Error(`Resolved types file not found at: ${resolvedTypesPath}`)}const resolvedTypesContent=fs.readFileSync(resolvedTypesPath,\"utf8\");const sdkContent=`// Auto-generated API response types for Echo TypeScript SDK\n// This file is generated by running: npm run generate-api-types\n// Source: ${path.relative(process.cwd(),resolvedTypesPath)}\n// Do not edit this file manually - it will be overwritten\n\n${resolvedTypesContent.replace(/^\\/\\/ Auto-generated.*?\\n/,\"\").replace(/^\\/\\/ This file.*?\\n/,\"\").replace(/^\\/\\/ These types.*?\\n/,\"\").replace(/^\\/\\/ Do not edit.*?\\n/,\"\").replace(/^\\n+/,\"\")}`;const sdkSrcDir=path.dirname(sdkOutputPath);if(!fs.existsSync(sdkSrcDir)){fs.mkdirSync(sdkSrcDir,{recursive:true})}fs.writeFileSync(sdkOutputPath,sdkContent,\"utf8\");log(`\\u2705 Successfully copied API types to: ${path.relative(process.cwd(),sdkOutputPath)}`,options);const typeCount=(sdkContent.match(/^export (interface|type)/gm)||[]).length;log(`\\u{1F4DD} Generated ${typeCount} API types for SDK`,options)}catch(error){console.error(\"\\u274C Failed to copy resolved types to SDK:\",error);process.exit(1)}}__name(copyResolvedTypes,\"copyResolvedTypes\");function validateGeneratedTypes(options){log(\"Validating generated types...\",options);try{const sdkOutputPath=path.resolve(__dirname,\"..\",SDK_OUTPUT_FILE);if(!fs.existsSync(sdkOutputPath)){throw new Error(`Generated types file not found at: ${sdkOutputPath}`)}const content=fs.readFileSync(sdkOutputPath,\"utf8\");if(!content.includes(\"export interface\")&&!content.includes(\"export type\")){throw new Error(\"Generated types file does not contain any exported types\")}if(content.includes(\"import(\")){console.warn(\"\\u26A0\\uFE0F  Generated types may contain unresolved import statements\")}log(\"\\u2705 Generated types validation passed\",options)}catch(error){console.error(\"\\u274C Generated types validation failed:\",error);process.exit(1)}}__name(validateGeneratedTypes,\"validateGeneratedTypes\");async function main(){const options=parseArgs();console.log(\"\\u{1F527} Generating API types for Echo TypeScript SDK...\");if(options.verbose){console.log(\"Options:\",options);console.log(\"Working directory:\",process.cwd());console.log(\"Script directory:\",__dirname)}generateControlAppTypes(options);copyResolvedTypes(options);validateGeneratedTypes(options);console.log(\"\\u{1F389} Successfully generated API types for SDK!\");console.log(`\\u{1F4C4} Types available at: ${SDK_OUTPUT_FILE}`)}__name(main,\"main\");if(import.meta.url===`file://${process.argv[1]}`){main().catch(error=>{console.error(\"\\u274C Script failed:\",error);process.exit(1)})}export{copyResolvedTypes,generateControlAppTypes,main,parseArgs,validateGeneratedTypes};\n","warnings":[],"map":{"version":3,"mappings":";kHACA,UAAY,OAAQ,KACpB,UAAY,SAAU,OACtB,OAAS,aAAgB,gBACzB,OAAS,kBAAqB,MAE9B,MAAM,WAAa,cAAc,YAAY,GAAG,EAChD,MAAM,UAAY,KAAK,QAAQ,UAAU,EAUzC,MAAM,iBAAmB,uBACzB,MAAM,oBAAsB,sCAC5B,MAAM,gBAAkB,mBAUxB,SAAS,WAA2B,CAClC,MAAM,KAAO,QAAQ,KAAK,MAAM,CAAC,EACjC,MAAO,CACL,QAAS,KAAK,SAAS,WAAW,GAAK,KAAK,SAAS,IAAI,EACzD,eAAgB,KAAK,SAAS,mBAAmB,CACnD,CACF,CANS,8BAWT,SAAS,IAAI,QAAiB,QAA8B,CAC1D,GAAI,QAAQ,QAAS,CACnB,QAAQ,IAAI,wBAAwB,OAAO,EAAE,CAC/C,CACF,CAJS,kBAST,SAAS,wBAAwB,QAA8B,CAC7D,GAAI,QAAQ,eAAgB,CAC1B,IAAI,wDAAyD,OAAO,EACpE,MACF,CAEA,IAAI,yCAA0C,OAAO,EAErD,GAAI,CACF,MAAM,eAAiB,KAAK,QAAQ,UAAW,gBAAgB,EAG/D,GAAI,CAAC,GAAG,WAAW,cAAc,EAAG,CAClC,MAAM,IAAI,MAAM,6BAA6B,cAAc,EAAE,CAC/D,CAGA,SAAS,uBAAwB,CAC/B,IAAK,eACL,MAAO,QAAQ,QAAU,UAAY,MACvC,CAAC,EAGD,SAAS,6BAA8B,CACrC,IAAK,eACL,MAAO,QAAQ,QAAU,UAAY,MACvC,CAAC,EAED,IAAI,yDAAqD,OAAO,CAClE,OAAS,MAAO,CACd,QAAQ,MAAM,sDAAkD,KAAK,EACrE,QAAQ,KAAK,CAAC,CAChB,CACF,CAjCS,0DAsCT,SAAS,kBAAkB,QAA8B,CACvD,IAAI,uCAAwC,OAAO,EAEnD,GAAI,CACF,MAAM,eAAiB,KAAK,QAAQ,UAAW,gBAAgB,EAC/D,MAAM,kBAAoB,KAAK,KAAK,eAAgB,mBAAmB,EACvE,MAAM,cAAgB,KAAK,QAAQ,UAAW,KAAM,eAAe,EAGnE,GAAI,CAAC,GAAG,WAAW,iBAAiB,EAAG,CACrC,MAAM,IAAI,MAAM,qCAAqC,iBAAiB,EAAE,CAC1E,CAGA,MAAM,qBAAuB,GAAG,aAAa,kBAAmB,MAAM,EAGtE,MAAM,WAAa;AAAA;AAAA,aAEV,KAAK,SAAS,QAAQ,IAAI,EAAG,iBAAiB,CAAC;AAAA;AAAA;AAAA,EAG1D,qBACC,QAAQ,4BAA6B,EAAE,EACvC,QAAQ,uBAAwB,EAAE,EAClC,QAAQ,yBAA0B,EAAE,EACpC,QAAQ,yBAA0B,EAAE,EACpC,QAAQ,OAAQ,EAAE,CAAC,GAGlB,MAAM,UAAY,KAAK,QAAQ,aAAa,EAC5C,GAAI,CAAC,GAAG,WAAW,SAAS,EAAG,CAC7B,GAAG,UAAU,UAAW,CAAE,UAAW,IAAK,CAAC,CAC7C,CAGA,GAAG,cAAc,cAAe,WAAY,MAAM,EAElD,IACE,4CAAuC,KAAK,SAAS,QAAQ,IAAI,EAAG,aAAa,CAAC,GAClF,OACF,EAGA,MAAM,WAAa,WAAW,MAAM,4BAA4B,GAAK,CAAC,GACnE,OACH,IAAI,uBAAgB,SAAS,qBAAsB,OAAO,CAC5D,OAAS,MAAO,CACd,QAAQ,MAAM,+CAA2C,KAAK,EAC9D,QAAQ,KAAK,CAAC,CAChB,CACF,CAnDS,8CAwDT,SAAS,uBAAuB,QAA8B,CAC5D,IAAI,gCAAiC,OAAO,EAE5C,GAAI,CACF,MAAM,cAAgB,KAAK,QAAQ,UAAW,KAAM,eAAe,EAEnE,GAAI,CAAC,GAAG,WAAW,aAAa,EAAG,CACjC,MAAM,IAAI,MAAM,sCAAsC,aAAa,EAAE,CACvE,CAGA,MAAM,QAAU,GAAG,aAAa,cAAe,MAAM,EAErD,GACE,CAAC,QAAQ,SAAS,kBAAkB,GACpC,CAAC,QAAQ,SAAS,aAAa,EAC/B,CACA,MAAM,IAAI,MACR,0DACF,CACF,CAGA,GAAI,QAAQ,SAAS,SAAS,EAAG,CAC/B,QAAQ,KACN,wEACF,CACF,CAEA,IAAI,2CAAuC,OAAO,CACpD,OAAS,MAAO,CACd,QAAQ,MAAM,4CAAwC,KAAK,EAC3D,QAAQ,KAAK,CAAC,CAChB,CACF,CAlCS,wDAuCT,eAAe,MAAsB,CACnC,MAAM,QAAU,UAAU,EAE1B,QAAQ,IAAI,2DAAoD,EAEhE,GAAI,QAAQ,QAAS,CACnB,QAAQ,IAAI,WAAY,OAAO,EAC/B,QAAQ,IAAI,qBAAsB,QAAQ,IAAI,CAAC,EAC/C,QAAQ,IAAI,oBAAqB,SAAS,CAC5C,CAGA,wBAAwB,OAAO,EAG/B,kBAAkB,OAAO,EAGzB,uBAAuB,OAAO,EAE9B,QAAQ,IAAI,qDAA8C,EAC1D,QAAQ,IAAI,iCAA0B,eAAe,EAAE,CACzD,CAtBe,oBAyBf,GAAI,YAAY,MAAQ,UAAU,QAAQ,KAAK,CAAC,CAAC,GAAI,CACnD,KAAK,EAAE,MAAM,OAAS,CACpB,QAAQ,MAAM,wBAAoB,KAAK,EACvC,QAAQ,KAAK,CAAC,CAChB,CAAC,CACH","names":[],"ignoreList":[],"sources":["/root/developments/opensource/echo/packages/sdk/ts/scripts/generate-api-types.ts"],"sourcesContent":[null]}}