'use client';

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { Button } from '@/components/ui/button';
import { api } from '@/trpc/client';
import { toast } from 'sonner';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { useState } from 'react';

export function AppX402ProfitTotal() {
  const [processingAppIds, setProcessingAppIds] = useState<Set<string>>(
    new Set()
  );
  const [isSendingAll, setIsSendingAll] = useState(false);
  const utils = api.useUtils();

  const { data: totalProfit, isLoading: isTotalLoading } =
    api.admin.wallet.getX402AppProfit.useQuery();

  const { data: appBreakdown, isLoading: isBreakdownLoading } =
    api.admin.wallet.getX402AppProfitByApp.useQuery();

  const payoutMutation = api.admin.wallet.payoutX402AppProfit.useMutation({
    onSuccess: data => {
      toast.success('Payout successful!', {
        description: `Sent to ECHO_PAYOUTS. Tx: ${data.userOpHash.slice(0, 10)}...`,
      });
      void utils.admin.wallet.getX402AppProfit.invalidate();
      void utils.admin.wallet.getX402AppProfitByApp.invalidate();
    },
    onError: error => {
      toast.error('Payout failed', {
        description: error.message,
      });
    },
    onSettled: (data, error, variables) => {
      setProcessingAppIds(prev => {
        const next = new Set(prev);
        next.delete(variables.appId);
        return next;
      });
    },
  });

  const handlePayout = (appId: string, amount: number) => {
    if (amount <= 0) {
      toast.error('Invalid amount', {
        description: 'Amount must be greater than 0',
      });
      return;
    }

    setProcessingAppIds(prev => new Set(prev).add(appId));
    payoutMutation.mutate({ appId, amount });
  };

  const handleSendAll = async () => {
    if (!appBreakdown || appBreakdown.length === 0) {
      toast.error('No apps to payout');
      return;
    }

    const appsWithProfit = appBreakdown.filter(app => app.remainingProfit > 0);

    if (appsWithProfit.length === 0) {
      toast.error('No apps with remaining profit');
      return;
    }

    setIsSendingAll(true);

    for (const app of appsWithProfit) {
      setProcessingAppIds(prev => new Set(prev).add(app.appId));
      payoutMutation.mutate({
        appId: app.appId,
        amount: app.remainingProfit,
      });
    }

    setIsSendingAll(false);
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>App X402 Profit Total</CardTitle>
          <CardDescription>
            Total unclaimed profit generated by apps from X402 transactions
          </CardDescription>
        </CardHeader>

        <CardContent className="space-y-6">
          <div>
            <h3 className="text-sm font-medium text-muted-foreground mb-2">
              Total App Profit
            </h3>
            {isTotalLoading ? (
              <Skeleton className="h-10 w-32" />
            ) : (
              <div className="text-3xl font-bold text-green-600">
                ${(totalProfit ?? 0).toFixed(6)}
              </div>
            )}
            <p className="text-xs text-muted-foreground mt-1">
              Available for payout to applications
            </p>
          </div>

          <p className="text-sm text-muted-foreground">
            The App Profit represents the sum of all appProfit from X402
            transactions minus any payouts already made to applications.
          </p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Profit Breakdown by Application</CardTitle>
              <CardDescription>
                X402 profit generated by each application
              </CardDescription>
            </div>
            {appBreakdown &&
              appBreakdown.some(app => app.remainingProfit > 0) && (
                <Button
                  onClick={handleSendAll}
                  disabled={isSendingAll || payoutMutation.isPending}
                  variant="default"
                >
                  {isSendingAll ? 'Processing...' : 'Send All'}
                </Button>
              )}
          </div>
        </CardHeader>
        <CardContent>
          {isBreakdownLoading ? (
            <div className="space-y-2">
              <Skeleton className="h-12 w-full" />
              <Skeleton className="h-12 w-full" />
              <Skeleton className="h-12 w-full" />
            </div>
          ) : !appBreakdown || appBreakdown.length === 0 ? (
            <p className="text-sm text-muted-foreground text-center py-8">
              No app profit data available
            </p>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Application</TableHead>
                    <TableHead className="text-right">Total Profit</TableHead>
                    <TableHead className="text-right">Total Payouts</TableHead>
                    <TableHead className="text-right">Remaining</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {appBreakdown.map(app => (
                    <TableRow key={app.appId}>
                      <TableCell className="font-medium">
                        {app.appName}
                      </TableCell>
                      <TableCell className="text-right font-mono text-sm">
                        ${app.totalProfit.toFixed(6)}
                      </TableCell>
                      <TableCell className="text-right font-mono text-sm">
                        ${app.totalPayouts.toFixed(6)}
                      </TableCell>
                      <TableCell className="text-right font-mono text-sm">
                        <span
                          className={
                            app.remainingProfit > 0
                              ? 'text-green-600 font-semibold'
                              : ''
                          }
                        >
                          ${app.remainingProfit.toFixed(6)}
                        </span>
                      </TableCell>
                      <TableCell className="text-right">
                        <Button
                          onClick={() =>
                            handlePayout(app.appId, app.remainingProfit)
                          }
                          disabled={
                            app.remainingProfit <= 0 ||
                            processingAppIds.has(app.appId)
                          }
                          size="sm"
                          variant="outline"
                        >
                          {processingAppIds.has(app.appId)
                            ? 'Sending...'
                            : 'Send'}
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
